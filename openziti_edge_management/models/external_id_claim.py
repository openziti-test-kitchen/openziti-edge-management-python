# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API  # noqa: E501

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr, validator

class ExternalIdClaim(BaseModel):
    """
    ExternalIdClaim
    """
    index: Optional[StrictInt] = Field(...)
    location: Optional[StrictStr] = Field(...)
    matcher: Optional[StrictStr] = Field(...)
    matcher_criteria: Optional[StrictStr] = Field(..., alias="matcherCriteria")
    parser: Optional[StrictStr] = Field(...)
    parser_criteria: Optional[StrictStr] = Field(..., alias="parserCriteria")
    __properties = ["index", "location", "matcher", "matcherCriteria", "parser", "parserCriteria"]

    @validator('location')
    def location_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('COMMON_NAME', 'SAN_URI', 'SAN_EMAIL'):
            raise ValueError("must be one of enum values ('COMMON_NAME', 'SAN_URI', 'SAN_EMAIL')")
        return value

    @validator('matcher')
    def matcher_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('ALL', 'PREFIX', 'SUFFIX', 'SCHEME'):
            raise ValueError("must be one of enum values ('ALL', 'PREFIX', 'SUFFIX', 'SCHEME')")
        return value

    @validator('parser')
    def parser_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('NONE', 'SPLIT'):
            raise ValueError("must be one of enum values ('NONE', 'SPLIT')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalIdClaim:
        """Create an instance of ExternalIdClaim from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if index (nullable) is None
        # and __fields_set__ contains the field
        if self.index is None and "index" in self.__fields_set__:
            _dict['index'] = None

        # set to None if location (nullable) is None
        # and __fields_set__ contains the field
        if self.location is None and "location" in self.__fields_set__:
            _dict['location'] = None

        # set to None if matcher (nullable) is None
        # and __fields_set__ contains the field
        if self.matcher is None and "matcher" in self.__fields_set__:
            _dict['matcher'] = None

        # set to None if matcher_criteria (nullable) is None
        # and __fields_set__ contains the field
        if self.matcher_criteria is None and "matcher_criteria" in self.__fields_set__:
            _dict['matcherCriteria'] = None

        # set to None if parser (nullable) is None
        # and __fields_set__ contains the field
        if self.parser is None and "parser" in self.__fields_set__:
            _dict['parser'] = None

        # set to None if parser_criteria (nullable) is None
        # and __fields_set__ contains the field
        if self.parser_criteria is None and "parser_criteria" in self.__fields_set__:
            _dict['parserCriteria'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalIdClaim:
        """Create an instance of ExternalIdClaim from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalIdClaim.parse_obj(obj)

        _obj = ExternalIdClaim.parse_obj({
            "index": obj.get("index"),
            "location": obj.get("location"),
            "matcher": obj.get("matcher"),
            "matcher_criteria": obj.get("matcherCriteria"),
            "parser": obj.get("parser"),
            "parser_criteria": obj.get("parserCriteria")
        })
        return _obj

