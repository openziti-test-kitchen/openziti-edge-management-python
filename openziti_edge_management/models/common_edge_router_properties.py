# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conint
from openziti_edge_management.models.tags import Tags

class CommonEdgeRouterProperties(BaseModel):
    """
    CommonEdgeRouterProperties
    """
    app_data: Optional[Tags] = Field(None, alias="appData")
    cost: Optional[conint(strict=True, le=65535, ge=0)] = Field(...)
    disabled: StrictBool = Field(...)
    hostname: StrictStr = Field(...)
    is_online: StrictBool = Field(..., alias="isOnline")
    name: StrictStr = Field(...)
    no_traversal: Optional[StrictBool] = Field(..., alias="noTraversal")
    supported_protocols: Dict[str, StrictStr] = Field(..., alias="supportedProtocols")
    sync_status: StrictStr = Field(..., alias="syncStatus")
    __properties = ["appData", "cost", "disabled", "hostname", "isOnline", "name", "noTraversal", "supportedProtocols", "syncStatus"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CommonEdgeRouterProperties:
        """Create an instance of CommonEdgeRouterProperties from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of app_data
        if self.app_data:
            _dict['appData'] = self.app_data.to_dict()
        # set to None if cost (nullable) is None
        # and __fields_set__ contains the field
        if self.cost is None and "cost" in self.__fields_set__:
            _dict['cost'] = None

        # set to None if no_traversal (nullable) is None
        # and __fields_set__ contains the field
        if self.no_traversal is None and "no_traversal" in self.__fields_set__:
            _dict['noTraversal'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CommonEdgeRouterProperties:
        """Create an instance of CommonEdgeRouterProperties from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CommonEdgeRouterProperties.parse_obj(obj)

        _obj = CommonEdgeRouterProperties.parse_obj({
            "app_data": Tags.from_dict(obj.get("appData")) if obj.get("appData") is not None else None,
            "cost": obj.get("cost"),
            "disabled": obj.get("disabled"),
            "hostname": obj.get("hostname"),
            "is_online": obj.get("isOnline"),
            "name": obj.get("name"),
            "no_traversal": obj.get("noTraversal"),
            "supported_protocols": obj.get("supportedProtocols"),
            "sync_status": obj.get("syncStatus")
        })
        return _obj


