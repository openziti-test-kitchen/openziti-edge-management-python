# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API  # noqa: E501

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictBool, StrictInt

class AuthPolicyPrimaryUpdb(BaseModel):
    """
    AuthPolicyPrimaryUpdb
    """
    allowed: StrictBool = Field(...)
    lockout_duration_minutes: StrictInt = Field(..., alias="lockoutDurationMinutes")
    max_attempts: StrictInt = Field(..., alias="maxAttempts")
    min_password_length: StrictInt = Field(..., alias="minPasswordLength")
    require_mixed_case: StrictBool = Field(..., alias="requireMixedCase")
    require_number_char: StrictBool = Field(..., alias="requireNumberChar")
    require_special_char: StrictBool = Field(..., alias="requireSpecialChar")
    __properties = ["allowed", "lockoutDurationMinutes", "maxAttempts", "minPasswordLength", "requireMixedCase", "requireNumberChar", "requireSpecialChar"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthPolicyPrimaryUpdb:
        """Create an instance of AuthPolicyPrimaryUpdb from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthPolicyPrimaryUpdb:
        """Create an instance of AuthPolicyPrimaryUpdb from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthPolicyPrimaryUpdb.parse_obj(obj)

        _obj = AuthPolicyPrimaryUpdb.parse_obj({
            "allowed": obj.get("allowed"),
            "lockout_duration_minutes": obj.get("lockoutDurationMinutes"),
            "max_attempts": obj.get("maxAttempts"),
            "min_password_length": obj.get("minPasswordLength"),
            "require_mixed_case": obj.get("requireMixedCase"),
            "require_number_char": obj.get("requireNumberChar"),
            "require_special_char": obj.get("requireSpecialChar")
        })
        return _obj

