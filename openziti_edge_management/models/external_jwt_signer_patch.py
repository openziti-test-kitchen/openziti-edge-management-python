# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API  # noqa: E501

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr
from openziti_edge_management.models.tags import Tags

class ExternalJwtSignerPatch(BaseModel):
    """
    ExternalJwtSignerPatch
    """
    audience: Optional[StrictStr] = None
    cert_pem: Optional[StrictStr] = Field(None, alias="certPem")
    claims_property: Optional[StrictStr] = Field(None, alias="claimsProperty")
    enabled: Optional[StrictBool] = None
    external_auth_url: Optional[StrictStr] = Field(None, alias="externalAuthUrl")
    issuer: Optional[StrictStr] = None
    jwks_endpoint: Optional[StrictStr] = Field(None, alias="jwksEndpoint")
    kid: Optional[StrictStr] = None
    name: Optional[StrictStr] = None
    tags: Optional[Tags] = None
    use_external_id: Optional[StrictBool] = Field(None, alias="useExternalId")
    __properties = ["audience", "certPem", "claimsProperty", "enabled", "externalAuthUrl", "issuer", "jwksEndpoint", "kid", "name", "tags", "useExternalId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ExternalJwtSignerPatch:
        """Create an instance of ExternalJwtSignerPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        # set to None if audience (nullable) is None
        # and __fields_set__ contains the field
        if self.audience is None and "audience" in self.__fields_set__:
            _dict['audience'] = None

        # set to None if cert_pem (nullable) is None
        # and __fields_set__ contains the field
        if self.cert_pem is None and "cert_pem" in self.__fields_set__:
            _dict['certPem'] = None

        # set to None if claims_property (nullable) is None
        # and __fields_set__ contains the field
        if self.claims_property is None and "claims_property" in self.__fields_set__:
            _dict['claimsProperty'] = None

        # set to None if enabled (nullable) is None
        # and __fields_set__ contains the field
        if self.enabled is None and "enabled" in self.__fields_set__:
            _dict['enabled'] = None

        # set to None if external_auth_url (nullable) is None
        # and __fields_set__ contains the field
        if self.external_auth_url is None and "external_auth_url" in self.__fields_set__:
            _dict['externalAuthUrl'] = None

        # set to None if issuer (nullable) is None
        # and __fields_set__ contains the field
        if self.issuer is None and "issuer" in self.__fields_set__:
            _dict['issuer'] = None

        # set to None if jwks_endpoint (nullable) is None
        # and __fields_set__ contains the field
        if self.jwks_endpoint is None and "jwks_endpoint" in self.__fields_set__:
            _dict['jwksEndpoint'] = None

        # set to None if kid (nullable) is None
        # and __fields_set__ contains the field
        if self.kid is None and "kid" in self.__fields_set__:
            _dict['kid'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        # set to None if use_external_id (nullable) is None
        # and __fields_set__ contains the field
        if self.use_external_id is None and "use_external_id" in self.__fields_set__:
            _dict['useExternalId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ExternalJwtSignerPatch:
        """Create an instance of ExternalJwtSignerPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ExternalJwtSignerPatch.parse_obj(obj)

        _obj = ExternalJwtSignerPatch.parse_obj({
            "audience": obj.get("audience"),
            "cert_pem": obj.get("certPem"),
            "claims_property": obj.get("claimsProperty"),
            "enabled": obj.get("enabled"),
            "external_auth_url": obj.get("externalAuthUrl"),
            "issuer": obj.get("issuer"),
            "jwks_endpoint": obj.get("jwksEndpoint"),
            "kid": obj.get("kid"),
            "name": obj.get("name"),
            "tags": Tags.from_dict(obj.get("tags")) if obj.get("tags") is not None else None,
            "use_external_id": obj.get("useExternalId")
        })
        return _obj

