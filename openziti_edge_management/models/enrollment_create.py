# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class EnrollmentCreate(BaseModel):
    """
    EnrollmentCreate
    """
    ca_id: Optional[StrictStr] = Field(None, alias="caId")
    expires_at: datetime = Field(..., alias="expiresAt")
    identity_id: StrictStr = Field(..., alias="identityId")
    method: StrictStr = Field(...)
    username: Optional[StrictStr] = None
    __properties = ["caId", "expiresAt", "identityId", "method", "username"]

    @validator('method')
    def method_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('ott', 'ottca', 'updb'):
            raise ValueError("must be one of enum values ('ott', 'ottca', 'updb')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EnrollmentCreate:
        """Create an instance of EnrollmentCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if ca_id (nullable) is None
        # and __fields_set__ contains the field
        if self.ca_id is None and "ca_id" in self.__fields_set__:
            _dict['caId'] = None

        # set to None if username (nullable) is None
        # and __fields_set__ contains the field
        if self.username is None and "username" in self.__fields_set__:
            _dict['username'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EnrollmentCreate:
        """Create an instance of EnrollmentCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EnrollmentCreate.parse_obj(obj)

        _obj = EnrollmentCreate.parse_obj({
            "ca_id": obj.get("caId"),
            "expires_at": obj.get("expiresAt"),
            "identity_id": obj.get("identityId"),
            "method": obj.get("method"),
            "username": obj.get("username")
        })
        return _obj


