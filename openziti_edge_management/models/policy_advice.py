# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API  # noqa: E501

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictBool, StrictFloat, StrictInt, StrictStr, conlist
from openziti_edge_management.models.entity_ref import EntityRef
from openziti_edge_management.models.router_entity_ref import RouterEntityRef

class PolicyAdvice(BaseModel):
    """
    PolicyAdvice
    """
    common_routers: Optional[conlist(RouterEntityRef)] = Field(None, alias="commonRouters")
    identity: Optional[EntityRef] = None
    identity_id: Optional[StrictStr] = Field(None, alias="identityId")
    identity_router_count: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="identityRouterCount")
    is_bind_allowed: Optional[StrictBool] = Field(None, alias="isBindAllowed")
    is_dial_allowed: Optional[StrictBool] = Field(None, alias="isDialAllowed")
    service: Optional[EntityRef] = None
    service_id: Optional[StrictStr] = Field(None, alias="serviceId")
    service_router_count: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="serviceRouterCount")
    __properties = ["commonRouters", "identity", "identityId", "identityRouterCount", "isBindAllowed", "isDialAllowed", "service", "serviceId", "serviceRouterCount"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PolicyAdvice:
        """Create an instance of PolicyAdvice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in common_routers (list)
        _items = []
        if self.common_routers:
            for _item in self.common_routers:
                if _item:
                    _items.append(_item.to_dict())
            _dict['commonRouters'] = _items
        # override the default output from pydantic by calling `to_dict()` of identity
        if self.identity:
            _dict['identity'] = self.identity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service
        if self.service:
            _dict['service'] = self.service.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PolicyAdvice:
        """Create an instance of PolicyAdvice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PolicyAdvice.parse_obj(obj)

        _obj = PolicyAdvice.parse_obj({
            "common_routers": [RouterEntityRef.from_dict(_item) for _item in obj.get("commonRouters")] if obj.get("commonRouters") is not None else None,
            "identity": EntityRef.from_dict(obj.get("identity")) if obj.get("identity") is not None else None,
            "identity_id": obj.get("identityId"),
            "identity_router_count": obj.get("identityRouterCount"),
            "is_bind_allowed": obj.get("isBindAllowed"),
            "is_dial_allowed": obj.get("isDialAllowed"),
            "service": EntityRef.from_dict(obj.get("service")) if obj.get("service") is not None else None,
            "service_id": obj.get("serviceId"),
            "service_router_count": obj.get("serviceRouterCount")
        })
        return _obj

