# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, constr
from openziti_edge_management.models.env_info import EnvInfo
from openziti_edge_management.models.sdk_info import SdkInfo

class Authenticate(BaseModel):
    """
    A generic authenticate object meant for use with the /authenticate path. Required fields depend on authentication method.
    """
    config_types: Optional[conlist(StrictStr)] = Field(None, alias="configTypes", description="Specific configuration types that should be returned")
    env_info: Optional[EnvInfo] = Field(None, alias="envInfo")
    password: Optional[constr(strict=True, max_length=100, min_length=5)] = None
    sdk_info: Optional[SdkInfo] = Field(None, alias="sdkInfo")
    username: Optional[constr(strict=True, max_length=100, min_length=4)] = None
    __properties = ["configTypes", "envInfo", "password", "sdkInfo", "username"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Authenticate:
        """Create an instance of Authenticate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of env_info
        if self.env_info:
            _dict['envInfo'] = self.env_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of sdk_info
        if self.sdk_info:
            _dict['sdkInfo'] = self.sdk_info.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Authenticate:
        """Create an instance of Authenticate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Authenticate.parse_obj(obj)

        _obj = Authenticate.parse_obj({
            "config_types": obj.get("configTypes"),
            "env_info": EnvInfo.from_dict(obj.get("envInfo")) if obj.get("envInfo") is not None else None,
            "password": obj.get("password"),
            "sdk_info": SdkInfo.from_dict(obj.get("sdkInfo")) if obj.get("sdkInfo") is not None else None,
            "username": obj.get("username")
        })
        return _obj


