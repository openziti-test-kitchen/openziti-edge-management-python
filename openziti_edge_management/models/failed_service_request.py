# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API  # noqa: E501

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist
from openziti_edge_management.models.dial_bind import DialBind
from openziti_edge_management.models.policy_failure import PolicyFailure

class FailedServiceRequest(BaseModel):
    """
    FailedServiceRequest
    """
    api_session_id: Optional[StrictStr] = Field(None, alias="apiSessionId")
    policy_failures: Optional[conlist(PolicyFailure)] = Field(None, alias="policyFailures")
    service_id: Optional[StrictStr] = Field(None, alias="serviceId")
    service_name: Optional[StrictStr] = Field(None, alias="serviceName")
    session_type: Optional[DialBind] = Field(None, alias="sessionType")
    when: Optional[datetime] = None
    __properties = ["apiSessionId", "policyFailures", "serviceId", "serviceName", "sessionType", "when"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> FailedServiceRequest:
        """Create an instance of FailedServiceRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in policy_failures (list)
        _items = []
        if self.policy_failures:
            for _item in self.policy_failures:
                if _item:
                    _items.append(_item.to_dict())
            _dict['policyFailures'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> FailedServiceRequest:
        """Create an instance of FailedServiceRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return FailedServiceRequest.parse_obj(obj)

        _obj = FailedServiceRequest.parse_obj({
            "api_session_id": obj.get("apiSessionId"),
            "policy_failures": [PolicyFailure.from_dict(_item) for _item in obj.get("policyFailures")] if obj.get("policyFailures") is not None else None,
            "service_id": obj.get("serviceId"),
            "service_name": obj.get("serviceName"),
            "session_type": obj.get("sessionType"),
            "when": obj.get("when")
        })
        return _obj

