# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API  # noqa: E501

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, Optional
from pydantic import BaseModel, Field, StrictStr
from openziti_edge_management.models.api_version import ApiVersion

class Version(BaseModel):
    """
    Version
    """
    api_versions: Optional[Dict[str, Dict[str, ApiVersion]]] = Field(None, alias="apiVersions")
    build_date: Optional[StrictStr] = Field(None, alias="buildDate")
    revision: Optional[StrictStr] = None
    runtime_version: Optional[StrictStr] = Field(None, alias="runtimeVersion")
    version: Optional[StrictStr] = None
    __properties = ["apiVersions", "buildDate", "revision", "runtimeVersion", "version"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Version:
        """Create an instance of Version from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in api_versions (dict)
        _field_dict = {}
        if self.api_versions:
            for _key in self.api_versions:
                if self.api_versions[_key]:
                    _field_dict[_key] = self.api_versions[_key].to_dict()
            _dict['apiVersions'] = _field_dict
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Version:
        """Create an instance of Version from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Version.parse_obj(obj)

        _obj = Version.parse_obj({
            "api_versions": dict(
                (_k, dict(
                    (_ik, ApiVersion.from_dict(_iv))
                        for _ik, _iv in _v.items()
                    )
                    if _v is not None
                    else None
                )
                for _k, _v in obj.get("apiVersions").items()
            )
            if obj.get("apiVersions") is not None
            else None,
            "build_date": obj.get("buildDate"),
            "revision": obj.get("revision"),
            "runtime_version": obj.get("runtimeVersion"),
            "version": obj.get("version")
        })
        return _obj

