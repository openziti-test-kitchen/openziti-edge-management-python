# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API  # noqa: E501

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictStr
from openziti_edge_management.models.entity_ref import EntityRef

class ServiceConfigDetail(BaseModel):
    """
    ServiceConfigDetail
    """
    config: EntityRef = Field(...)
    config_id: StrictStr = Field(..., alias="configId")
    service: EntityRef = Field(...)
    service_id: StrictStr = Field(..., alias="serviceId")
    __properties = ["config", "configId", "service", "serviceId"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ServiceConfigDetail:
        """Create an instance of ServiceConfigDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of service
        if self.service:
            _dict['service'] = self.service.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ServiceConfigDetail:
        """Create an instance of ServiceConfigDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ServiceConfigDetail.parse_obj(obj)

        _obj = ServiceConfigDetail.parse_obj({
            "config": EntityRef.from_dict(obj.get("config")) if obj.get("config") is not None else None,
            "config_id": obj.get("configId"),
            "service": EntityRef.from_dict(obj.get("service")) if obj.get("service") is not None else None,
            "service_id": obj.get("serviceId")
        })
        return _obj

