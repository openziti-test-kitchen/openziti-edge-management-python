# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API  # noqa: E501

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from openziti_edge_management.models.link import Link
from openziti_edge_management.models.named_role import NamedRole
from openziti_edge_management.models.semantic import Semantic
from openziti_edge_management.models.tags import Tags

class EdgeRouterPolicyDetail(BaseModel):
    """
    EdgeRouterPolicyDetail
    """
    links: Dict[str, Link] = Field(..., alias="_links", description="A map of named links")
    created_at: datetime = Field(..., alias="createdAt")
    id: StrictStr = Field(...)
    tags: Optional[Tags] = None
    updated_at: datetime = Field(..., alias="updatedAt")
    edge_router_roles: conlist(StrictStr) = Field(..., alias="edgeRouterRoles")
    edge_router_roles_display: conlist(NamedRole) = Field(..., alias="edgeRouterRolesDisplay")
    identity_roles: conlist(StrictStr) = Field(..., alias="identityRoles")
    identity_roles_display: conlist(NamedRole) = Field(..., alias="identityRolesDisplay")
    is_system: StrictBool = Field(..., alias="isSystem")
    name: StrictStr = Field(...)
    semantic: Semantic = Field(...)
    __properties = ["_links", "createdAt", "id", "tags", "updatedAt", "edgeRouterRoles", "edgeRouterRolesDisplay", "identityRoles", "identityRolesDisplay", "isSystem", "name", "semantic"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> EdgeRouterPolicyDetail:
        """Create an instance of EdgeRouterPolicyDetail from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in links (dict)
        _field_dict = {}
        if self.links:
            for _key in self.links:
                if self.links[_key]:
                    _field_dict[_key] = self.links[_key].to_dict()
            _dict['_links'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in edge_router_roles_display (list)
        _items = []
        if self.edge_router_roles_display:
            for _item in self.edge_router_roles_display:
                if _item:
                    _items.append(_item.to_dict())
            _dict['edgeRouterRolesDisplay'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in identity_roles_display (list)
        _items = []
        if self.identity_roles_display:
            for _item in self.identity_roles_display:
                if _item:
                    _items.append(_item.to_dict())
            _dict['identityRolesDisplay'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> EdgeRouterPolicyDetail:
        """Create an instance of EdgeRouterPolicyDetail from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return EdgeRouterPolicyDetail.parse_obj(obj)

        _obj = EdgeRouterPolicyDetail.parse_obj({
            "links": dict(
                (_k, Link.from_dict(_v))
                for _k, _v in obj.get("_links").items()
            )
            if obj.get("_links") is not None
            else None,
            "created_at": obj.get("createdAt"),
            "id": obj.get("id"),
            "tags": Tags.from_dict(obj.get("tags")) if obj.get("tags") is not None else None,
            "updated_at": obj.get("updatedAt"),
            "edge_router_roles": obj.get("edgeRouterRoles"),
            "edge_router_roles_display": [NamedRole.from_dict(_item) for _item in obj.get("edgeRouterRolesDisplay")] if obj.get("edgeRouterRolesDisplay") is not None else None,
            "identity_roles": obj.get("identityRoles"),
            "identity_roles_display": [NamedRole.from_dict(_item) for _item in obj.get("identityRolesDisplay")] if obj.get("identityRolesDisplay") is not None else None,
            "is_system": obj.get("isSystem"),
            "name": obj.get("name"),
            "semantic": obj.get("semantic")
        })
        return _obj

