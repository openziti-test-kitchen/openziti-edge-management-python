# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class IdentityEnrollmentsOtt(BaseModel):
    """
    IdentityEnrollmentsOtt
    """
    expires_at: Optional[datetime] = Field(None, alias="expiresAt")
    id: Optional[StrictStr] = None
    jwt: Optional[StrictStr] = None
    token: Optional[StrictStr] = None
    __properties = ["expiresAt", "id", "jwt", "token"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IdentityEnrollmentsOtt:
        """Create an instance of IdentityEnrollmentsOtt from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IdentityEnrollmentsOtt:
        """Create an instance of IdentityEnrollmentsOtt from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IdentityEnrollmentsOtt.parse_obj(obj)

        _obj = IdentityEnrollmentsOtt.parse_obj({
            "expires_at": obj.get("expiresAt"),
            "id": obj.get("id"),
            "jwt": obj.get("jwt"),
            "token": obj.get("token")
        })
        return _obj


