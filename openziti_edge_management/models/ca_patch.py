# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist
from openziti_edge_management.models.external_id_claim_patch import ExternalIdClaimPatch
from openziti_edge_management.models.tags import Tags

class CaPatch(BaseModel):
    """
    CaPatch
    """
    external_id_claim: Optional[ExternalIdClaimPatch] = Field(None, alias="externalIdClaim")
    identity_name_format: Optional[StrictStr] = Field(None, alias="identityNameFormat")
    identity_roles: Optional[conlist(StrictStr)] = Field(None, alias="identityRoles")
    is_auth_enabled: Optional[StrictBool] = Field(None, alias="isAuthEnabled")
    is_auto_ca_enrollment_enabled: Optional[StrictBool] = Field(None, alias="isAutoCaEnrollmentEnabled")
    is_ott_ca_enrollment_enabled: Optional[StrictBool] = Field(None, alias="isOttCaEnrollmentEnabled")
    name: Optional[StrictStr] = None
    tags: Optional[Tags] = None
    __properties = ["externalIdClaim", "identityNameFormat", "identityRoles", "isAuthEnabled", "isAutoCaEnrollmentEnabled", "isOttCaEnrollmentEnabled", "name", "tags"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> CaPatch:
        """Create an instance of CaPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of external_id_claim
        if self.external_id_claim:
            _dict['externalIdClaim'] = self.external_id_claim.to_dict()
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        # set to None if identity_name_format (nullable) is None
        # and __fields_set__ contains the field
        if self.identity_name_format is None and "identity_name_format" in self.__fields_set__:
            _dict['identityNameFormat'] = None

        # set to None if is_auth_enabled (nullable) is None
        # and __fields_set__ contains the field
        if self.is_auth_enabled is None and "is_auth_enabled" in self.__fields_set__:
            _dict['isAuthEnabled'] = None

        # set to None if is_auto_ca_enrollment_enabled (nullable) is None
        # and __fields_set__ contains the field
        if self.is_auto_ca_enrollment_enabled is None and "is_auto_ca_enrollment_enabled" in self.__fields_set__:
            _dict['isAutoCaEnrollmentEnabled'] = None

        # set to None if is_ott_ca_enrollment_enabled (nullable) is None
        # and __fields_set__ contains the field
        if self.is_ott_ca_enrollment_enabled is None and "is_ott_ca_enrollment_enabled" in self.__fields_set__:
            _dict['isOttCaEnrollmentEnabled'] = None

        # set to None if name (nullable) is None
        # and __fields_set__ contains the field
        if self.name is None and "name" in self.__fields_set__:
            _dict['name'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> CaPatch:
        """Create an instance of CaPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return CaPatch.parse_obj(obj)

        _obj = CaPatch.parse_obj({
            "external_id_claim": ExternalIdClaimPatch.from_dict(obj.get("externalIdClaim")) if obj.get("externalIdClaim") is not None else None,
            "identity_name_format": obj.get("identityNameFormat"),
            "identity_roles": obj.get("identityRoles"),
            "is_auth_enabled": obj.get("isAuthEnabled"),
            "is_auto_ca_enrollment_enabled": obj.get("isAutoCaEnrollmentEnabled"),
            "is_ott_ca_enrollment_enabled": obj.get("isOttCaEnrollmentEnabled"),
            "name": obj.get("name"),
            "tags": Tags.from_dict(obj.get("tags")) if obj.get("tags") is not None else None
        })
        return _obj


