# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API  # noqa: E501

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Dict, List
from pydantic import BaseModel, Field, conlist
from openziti_edge_management.models.api_session_posture_data import ApiSessionPostureData
from openziti_edge_management.models.posture_data_domain import PostureDataDomain
from openziti_edge_management.models.posture_data_mac import PostureDataMac
from openziti_edge_management.models.posture_data_os import PostureDataOs
from openziti_edge_management.models.posture_data_process import PostureDataProcess

class PostureData(BaseModel):
    """
    PostureData
    """
    api_session_posture_data: Dict[str, ApiSessionPostureData] = Field(..., alias="apiSessionPostureData")
    domain: PostureDataDomain = Field(...)
    mac: PostureDataMac = Field(...)
    os: PostureDataOs = Field(...)
    processes: conlist(PostureDataProcess) = Field(...)
    __properties = ["apiSessionPostureData", "domain", "mac", "os", "processes"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PostureData:
        """Create an instance of PostureData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each value in api_session_posture_data (dict)
        _field_dict = {}
        if self.api_session_posture_data:
            for _key in self.api_session_posture_data:
                if self.api_session_posture_data[_key]:
                    _field_dict[_key] = self.api_session_posture_data[_key].to_dict()
            _dict['apiSessionPostureData'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of domain
        if self.domain:
            _dict['domain'] = self.domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mac
        if self.mac:
            _dict['mac'] = self.mac.to_dict()
        # override the default output from pydantic by calling `to_dict()` of os
        if self.os:
            _dict['os'] = self.os.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in processes (list)
        _items = []
        if self.processes:
            for _item in self.processes:
                if _item:
                    _items.append(_item.to_dict())
            _dict['processes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PostureData:
        """Create an instance of PostureData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PostureData.parse_obj(obj)

        _obj = PostureData.parse_obj({
            "api_session_posture_data": dict(
                (_k, ApiSessionPostureData.from_dict(_v))
                for _k, _v in obj.get("apiSessionPostureData").items()
            )
            if obj.get("apiSessionPostureData") is not None
            else None,
            "domain": PostureDataDomain.from_dict(obj.get("domain")) if obj.get("domain") is not None else None,
            "mac": PostureDataMac.from_dict(obj.get("mac")) if obj.get("mac") is not None else None,
            "os": PostureDataOs.from_dict(obj.get("os")) if obj.get("os") is not None else None,
            "processes": [PostureDataProcess.from_dict(_item) for _item in obj.get("processes")] if obj.get("processes") is not None else None
        })
        return _obj

