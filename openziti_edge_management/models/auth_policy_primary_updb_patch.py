# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt

class AuthPolicyPrimaryUpdbPatch(BaseModel):
    """
    AuthPolicyPrimaryUpdbPatch
    """
    allowed: Optional[StrictBool] = None
    lockout_duration_minutes: Optional[StrictInt] = Field(None, alias="lockoutDurationMinutes")
    max_attempts: Optional[StrictInt] = Field(None, alias="maxAttempts")
    min_password_length: Optional[StrictInt] = Field(None, alias="minPasswordLength")
    require_mixed_case: Optional[StrictBool] = Field(None, alias="requireMixedCase")
    require_number_char: Optional[StrictBool] = Field(None, alias="requireNumberChar")
    require_special_char: Optional[StrictBool] = Field(None, alias="requireSpecialChar")
    __properties = ["allowed", "lockoutDurationMinutes", "maxAttempts", "minPasswordLength", "requireMixedCase", "requireNumberChar", "requireSpecialChar"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AuthPolicyPrimaryUpdbPatch:
        """Create an instance of AuthPolicyPrimaryUpdbPatch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # set to None if allowed (nullable) is None
        # and __fields_set__ contains the field
        if self.allowed is None and "allowed" in self.__fields_set__:
            _dict['allowed'] = None

        # set to None if lockout_duration_minutes (nullable) is None
        # and __fields_set__ contains the field
        if self.lockout_duration_minutes is None and "lockout_duration_minutes" in self.__fields_set__:
            _dict['lockoutDurationMinutes'] = None

        # set to None if max_attempts (nullable) is None
        # and __fields_set__ contains the field
        if self.max_attempts is None and "max_attempts" in self.__fields_set__:
            _dict['maxAttempts'] = None

        # set to None if min_password_length (nullable) is None
        # and __fields_set__ contains the field
        if self.min_password_length is None and "min_password_length" in self.__fields_set__:
            _dict['minPasswordLength'] = None

        # set to None if require_mixed_case (nullable) is None
        # and __fields_set__ contains the field
        if self.require_mixed_case is None and "require_mixed_case" in self.__fields_set__:
            _dict['requireMixedCase'] = None

        # set to None if require_number_char (nullable) is None
        # and __fields_set__ contains the field
        if self.require_number_char is None and "require_number_char" in self.__fields_set__:
            _dict['requireNumberChar'] = None

        # set to None if require_special_char (nullable) is None
        # and __fields_set__ contains the field
        if self.require_special_char is None and "require_special_char" in self.__fields_set__:
            _dict['requireSpecialChar'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AuthPolicyPrimaryUpdbPatch:
        """Create an instance of AuthPolicyPrimaryUpdbPatch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AuthPolicyPrimaryUpdbPatch.parse_obj(obj)

        _obj = AuthPolicyPrimaryUpdbPatch.parse_obj({
            "allowed": obj.get("allowed"),
            "lockout_duration_minutes": obj.get("lockoutDurationMinutes"),
            "max_attempts": obj.get("maxAttempts"),
            "min_password_length": obj.get("minPasswordLength"),
            "require_mixed_case": obj.get("requireMixedCase"),
            "require_number_char": obj.get("requireNumberChar"),
            "require_special_char": obj.get("requireSpecialChar")
        })
        return _obj


