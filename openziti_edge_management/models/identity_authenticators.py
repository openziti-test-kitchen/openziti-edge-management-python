# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel
from openziti_edge_management.models.identity_authenticators_cert import IdentityAuthenticatorsCert
from openziti_edge_management.models.identity_authenticators_updb import IdentityAuthenticatorsUpdb

class IdentityAuthenticators(BaseModel):
    """
    IdentityAuthenticators
    """
    cert: Optional[IdentityAuthenticatorsCert] = None
    updb: Optional[IdentityAuthenticatorsUpdb] = None
    __properties = ["cert", "updb"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> IdentityAuthenticators:
        """Create an instance of IdentityAuthenticators from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of cert
        if self.cert:
            _dict['cert'] = self.cert.to_dict()
        # override the default output from pydantic by calling `to_dict()` of updb
        if self.updb:
            _dict['updb'] = self.updb.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> IdentityAuthenticators:
        """Create an instance of IdentityAuthenticators from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return IdentityAuthenticators.parse_obj(obj)

        _obj = IdentityAuthenticators.parse_obj({
            "cert": IdentityAuthenticatorsCert.from_dict(obj.get("cert")) if obj.get("cert") is not None else None,
            "updb": IdentityAuthenticatorsUpdb.from_dict(obj.get("updb")) if obj.get("updb") is not None else None
        })
        return _obj


