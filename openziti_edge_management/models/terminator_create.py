# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API  # noqa: E501

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, Field, StrictStr, conbytes, conint, constr, validator
from openziti_edge_management.models.tags import Tags
from openziti_edge_management.models.terminator_precedence import TerminatorPrecedence

class TerminatorCreate(BaseModel):
    """
    TerminatorCreate
    """
    address: StrictStr = Field(...)
    binding: StrictStr = Field(...)
    cost: Optional[conint(strict=True, le=65535, ge=0)] = None
    identity: Optional[StrictStr] = None
    identity_secret: Optional[Union[conbytes(strict=True), constr(strict=True)]] = Field(None, alias="identitySecret")
    precedence: Optional[TerminatorPrecedence] = None
    router: StrictStr = Field(...)
    service: StrictStr = Field(...)
    tags: Optional[Tags] = None
    __properties = ["address", "binding", "cost", "identity", "identitySecret", "precedence", "router", "service", "tags"]

    @validator('identity_secret')
    def identity_secret_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$", value):
            raise ValueError(r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TerminatorCreate:
        """Create an instance of TerminatorCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of tags
        if self.tags:
            _dict['tags'] = self.tags.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TerminatorCreate:
        """Create an instance of TerminatorCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return TerminatorCreate.parse_obj(obj)

        _obj = TerminatorCreate.parse_obj({
            "address": obj.get("address"),
            "binding": obj.get("binding"),
            "cost": obj.get("cost"),
            "identity": obj.get("identity"),
            "identity_secret": obj.get("identitySecret"),
            "precedence": obj.get("precedence"),
            "router": obj.get("router"),
            "service": obj.get("service"),
            "tags": Tags.from_dict(obj.get("tags")) if obj.get("tags") is not None else None
        })
        return _obj

