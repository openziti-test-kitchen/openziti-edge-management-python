# coding: utf-8

"""
    Ziti Edge Management

    OpenZiti Edge Management API  # noqa: E501

    The version of the OpenAPI document: 0.25.31
    Contact: help@openziti.org
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import re  # noqa: F401
import io
import warnings

from pydantic import validate_arguments, ValidationError
from typing_extensions import Annotated

from pydantic import Field, StrictInt, StrictStr, conlist

from typing import Optional

from openziti_edge_management.models.create_envelope import CreateEnvelope
from openziti_edge_management.models.detail_posture_check_envelope import DetailPostureCheckEnvelope
from openziti_edge_management.models.detail_posture_check_type_envelope import DetailPostureCheckTypeEnvelope
from openziti_edge_management.models.empty import Empty
from openziti_edge_management.models.list_posture_check_envelope import ListPostureCheckEnvelope
from openziti_edge_management.models.list_posture_check_types_envelope import ListPostureCheckTypesEnvelope
from openziti_edge_management.models.posture_check_create import PostureCheckCreate
from openziti_edge_management.models.posture_check_patch import PostureCheckPatch
from openziti_edge_management.models.posture_check_update import PostureCheckUpdate

from openziti_edge_management.api_client import ApiClient
from openziti_edge_management.api_response import ApiResponse
from openziti_edge_management.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class PostureChecksApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_posture_check(self, posture_check : Annotated[PostureCheckCreate, Field(..., description="A Posture Check to create")], **kwargs) -> CreateEnvelope:  # noqa: E501
        """Creates a Posture Checks  # noqa: E501

        Creates a Posture Checks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_posture_check(posture_check, async_req=True)
        >>> result = thread.get()

        :param posture_check: A Posture Check to create (required)
        :type posture_check: PostureCheckCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: CreateEnvelope
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the create_posture_check_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.create_posture_check_with_http_info(posture_check, **kwargs)  # noqa: E501

    @validate_arguments
    def create_posture_check_with_http_info(self, posture_check : Annotated[PostureCheckCreate, Field(..., description="A Posture Check to create")], **kwargs) -> ApiResponse:  # noqa: E501
        """Creates a Posture Checks  # noqa: E501

        Creates a Posture Checks  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_posture_check_with_http_info(posture_check, async_req=True)
        >>> result = thread.get()

        :param posture_check: A Posture Check to create (required)
        :type posture_check: PostureCheckCreate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(CreateEnvelope, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'posture_check'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_posture_check" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['posture_check'] is not None:
            _body_params = _params['posture_check']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ztSession', 'oauth2']  # noqa: E501

        _response_types_map = {
            '201': "CreateEnvelope",
            '400': "ApiErrorEnvelope",
            '401': "ApiErrorEnvelope",
        }

        return self.api_client.call_api(
            '/posture-checks', 'POST',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def delete_posture_check(self, id : Annotated[StrictStr, Field(..., description="The id of the requested resource")], **kwargs) -> Empty:  # noqa: E501
        """Deletes an Posture Checks  # noqa: E501

        Deletes and Posture Checks by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_posture_check(id, async_req=True)
        >>> result = thread.get()

        :param id: The id of the requested resource (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Empty
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the delete_posture_check_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.delete_posture_check_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def delete_posture_check_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the requested resource")], **kwargs) -> ApiResponse:  # noqa: E501
        """Deletes an Posture Checks  # noqa: E501

        Deletes and Posture Checks by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_posture_check_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The id of the requested resource (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Empty, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_posture_check" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ztSession', 'oauth2']  # noqa: E501

        _response_types_map = {
            '200': "Empty",
            '403': "ApiErrorEnvelope",
            '404': "ApiErrorEnvelope",
        }

        return self.api_client.call_api(
            '/posture-checks/{id}', 'DELETE',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def detail_posture_check(self, id : Annotated[StrictStr, Field(..., description="The id of the requested resource")], **kwargs) -> DetailPostureCheckEnvelope:  # noqa: E501
        """Retrieves a single Posture Checks  # noqa: E501

        Retrieves a single Posture Checks by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.detail_posture_check(id, async_req=True)
        >>> result = thread.get()

        :param id: The id of the requested resource (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DetailPostureCheckEnvelope
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the detail_posture_check_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.detail_posture_check_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def detail_posture_check_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the requested resource")], **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieves a single Posture Checks  # noqa: E501

        Retrieves a single Posture Checks by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.detail_posture_check_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The id of the requested resource (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DetailPostureCheckEnvelope, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detail_posture_check" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ztSession', 'oauth2']  # noqa: E501

        _response_types_map = {
            '200': "DetailPostureCheckEnvelope",
            '401': "ApiErrorEnvelope",
            '404': "ApiErrorEnvelope",
        }

        return self.api_client.call_api(
            '/posture-checks/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def detail_posture_check_type(self, id : Annotated[StrictStr, Field(..., description="The id of the requested resource")], **kwargs) -> DetailPostureCheckTypeEnvelope:  # noqa: E501
        """Retrieves a single posture check type  # noqa: E501

        Retrieves a single posture check type by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.detail_posture_check_type(id, async_req=True)
        >>> result = thread.get()

        :param id: The id of the requested resource (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: DetailPostureCheckTypeEnvelope
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the detail_posture_check_type_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.detail_posture_check_type_with_http_info(id, **kwargs)  # noqa: E501

    @validate_arguments
    def detail_posture_check_type_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the requested resource")], **kwargs) -> ApiResponse:  # noqa: E501
        """Retrieves a single posture check type  # noqa: E501

        Retrieves a single posture check type by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.detail_posture_check_type_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param id: The id of the requested resource (required)
        :type id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(DetailPostureCheckTypeEnvelope, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method detail_posture_check_type" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ztSession', 'oauth2']  # noqa: E501

        _response_types_map = {
            '200': "DetailPostureCheckTypeEnvelope",
            '401': "ApiErrorEnvelope",
            '404': "ApiErrorEnvelope",
        }

        return self.api_client.call_api(
            '/posture-check-types/{id}', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_posture_check_types(self, limit : Optional[StrictInt] = None, offset : Optional[StrictInt] = None, filter : Optional[StrictStr] = None, **kwargs) -> ListPostureCheckTypesEnvelope:  # noqa: E501
        """List a subset of posture check types  # noqa: E501

        Retrieves a list of posture check types   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_posture_check_types(limit, offset, filter, async_req=True)
        >>> result = thread.get()

        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param filter:
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListPostureCheckTypesEnvelope
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_posture_check_types_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_posture_check_types_with_http_info(limit, offset, filter, **kwargs)  # noqa: E501

    @validate_arguments
    def list_posture_check_types_with_http_info(self, limit : Optional[StrictInt] = None, offset : Optional[StrictInt] = None, filter : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List a subset of posture check types  # noqa: E501

        Retrieves a list of posture check types   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_posture_check_types_with_http_info(limit, offset, filter, async_req=True)
        >>> result = thread.get()

        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param filter:
        :type filter: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListPostureCheckTypesEnvelope, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'limit',
            'offset',
            'filter'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_posture_check_types" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ztSession', 'oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ListPostureCheckTypesEnvelope",
            '400': "ApiErrorEnvelope",
            '401': "ApiErrorEnvelope",
        }

        return self.api_client.call_api(
            '/posture-check-types', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def list_posture_checks(self, limit : Optional[StrictInt] = None, offset : Optional[StrictInt] = None, filter : Optional[StrictStr] = None, role_filter : Optional[conlist(StrictStr)] = None, role_semantic : Optional[StrictStr] = None, **kwargs) -> ListPostureCheckEnvelope:  # noqa: E501
        """List a subset of posture checks  # noqa: E501

        Retrieves a list of posture checks   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_posture_checks(limit, offset, filter, role_filter, role_semantic, async_req=True)
        >>> result = thread.get()

        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param filter:
        :type filter: str
        :param role_filter:
        :type role_filter: List[str]
        :param role_semantic:
        :type role_semantic: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: ListPostureCheckEnvelope
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the list_posture_checks_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.list_posture_checks_with_http_info(limit, offset, filter, role_filter, role_semantic, **kwargs)  # noqa: E501

    @validate_arguments
    def list_posture_checks_with_http_info(self, limit : Optional[StrictInt] = None, offset : Optional[StrictInt] = None, filter : Optional[StrictStr] = None, role_filter : Optional[conlist(StrictStr)] = None, role_semantic : Optional[StrictStr] = None, **kwargs) -> ApiResponse:  # noqa: E501
        """List a subset of posture checks  # noqa: E501

        Retrieves a list of posture checks   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.list_posture_checks_with_http_info(limit, offset, filter, role_filter, role_semantic, async_req=True)
        >>> result = thread.get()

        :param limit:
        :type limit: int
        :param offset:
        :type offset: int
        :param filter:
        :type filter: str
        :param role_filter:
        :type role_filter: List[str]
        :param role_semantic:
        :type role_semantic: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(ListPostureCheckEnvelope, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'limit',
            'offset',
            'filter',
            'role_filter',
            'role_semantic'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_posture_checks" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get('limit') is not None:  # noqa: E501
            _query_params.append(('limit', _params['limit']))

        if _params.get('offset') is not None:  # noqa: E501
            _query_params.append(('offset', _params['offset']))

        if _params.get('filter') is not None:  # noqa: E501
            _query_params.append(('filter', _params['filter']))

        if _params.get('role_filter') is not None:  # noqa: E501
            _query_params.append(('roleFilter', _params['role_filter']))
            _collection_formats['roleFilter'] = 'multi'

        if _params.get('role_semantic') is not None:  # noqa: E501
            _query_params.append(('roleSemantic', _params['role_semantic']))

        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8', 'application/json'])  # noqa: E501

        # authentication setting
        _auth_settings = ['ztSession', 'oauth2']  # noqa: E501

        _response_types_map = {
            '200': "ListPostureCheckEnvelope",
            '400': "ApiErrorEnvelope",
            '401': "ApiErrorEnvelope",
        }

        return self.api_client.call_api(
            '/posture-checks', 'GET',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def patch_posture_check(self, id : Annotated[StrictStr, Field(..., description="The id of the requested resource")], posture_check : Annotated[PostureCheckPatch, Field(..., description="A Posture Check patch object")], **kwargs) -> Empty:  # noqa: E501
        """Update the supplied fields on a Posture Checks  # noqa: E501

        Update only the supplied fields on a Posture Checks by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_posture_check(id, posture_check, async_req=True)
        >>> result = thread.get()

        :param id: The id of the requested resource (required)
        :type id: str
        :param posture_check: A Posture Check patch object (required)
        :type posture_check: PostureCheckPatch
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Empty
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the patch_posture_check_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.patch_posture_check_with_http_info(id, posture_check, **kwargs)  # noqa: E501

    @validate_arguments
    def patch_posture_check_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the requested resource")], posture_check : Annotated[PostureCheckPatch, Field(..., description="A Posture Check patch object")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update the supplied fields on a Posture Checks  # noqa: E501

        Update only the supplied fields on a Posture Checks by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_posture_check_with_http_info(id, posture_check, async_req=True)
        >>> result = thread.get()

        :param id: The id of the requested resource (required)
        :type id: str
        :param posture_check: A Posture Check patch object (required)
        :type posture_check: PostureCheckPatch
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Empty, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'posture_check'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method patch_posture_check" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['posture_check'] is not None:
            _body_params = _params['posture_check']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ztSession', 'oauth2']  # noqa: E501

        _response_types_map = {
            '200': "Empty",
            '400': "ApiErrorEnvelope",
            '401': "ApiErrorEnvelope",
            '404': "ApiErrorEnvelope",
        }

        return self.api_client.call_api(
            '/posture-checks/{id}', 'PATCH',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))

    @validate_arguments
    def update_posture_check(self, id : Annotated[StrictStr, Field(..., description="The id of the requested resource")], posture_check : Annotated[PostureCheckUpdate, Field(..., description="A Posture Check update object")], **kwargs) -> Empty:  # noqa: E501
        """Update all fields on a Posture Checks  # noqa: E501

        Update all fields on a Posture Checks by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_posture_check(id, posture_check, async_req=True)
        >>> result = thread.get()

        :param id: The id of the requested resource (required)
        :type id: str
        :param posture_check: A Posture Check update object (required)
        :type posture_check: PostureCheckUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: Empty
        """
        kwargs['_return_http_data_only'] = True
        if '_preload_content' in kwargs:
            raise ValueError("Error! Please call the update_posture_check_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data")
        return self.update_posture_check_with_http_info(id, posture_check, **kwargs)  # noqa: E501

    @validate_arguments
    def update_posture_check_with_http_info(self, id : Annotated[StrictStr, Field(..., description="The id of the requested resource")], posture_check : Annotated[PostureCheckUpdate, Field(..., description="A Posture Check update object")], **kwargs) -> ApiResponse:  # noqa: E501
        """Update all fields on a Posture Checks  # noqa: E501

        Update all fields on a Posture Checks by id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_posture_check_with_http_info(id, posture_check, async_req=True)
        >>> result = thread.get()

        :param id: The id of the requested resource (required)
        :type id: str
        :param posture_check: A Posture Check update object (required)
        :type posture_check: PostureCheckUpdate
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the 
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(Empty, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            'id',
            'posture_check'
        ]
        _all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout',
                '_request_auth',
                '_content_type',
                '_headers'
            ]
        )

        # validate the arguments
        for _key, _val in _params['kwargs'].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_posture_check" % _key
                )
            _params[_key] = _val
        del _params['kwargs']

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params['id']:
            _path_params['id'] = _params['id']


        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get('_headers', {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params['posture_check'] is not None:
            _body_params = _params['posture_check']

        # set the HTTP header `Accept`
        _header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get('_content_type',
            self.api_client.select_header_content_type(
                ['application/json']))
        if _content_types_list:
                _header_params['Content-Type'] = _content_types_list

        # authentication setting
        _auth_settings = ['ztSession', 'oauth2']  # noqa: E501

        _response_types_map = {
            '200': "Empty",
            '400': "ApiErrorEnvelope",
            '401': "ApiErrorEnvelope",
            '404': "ApiErrorEnvelope",
        }

        return self.api_client.call_api(
            '/posture-checks/{id}', 'PUT',
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get('async_req'),
            _return_http_data_only=_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=_params.get('_preload_content', True),
            _request_timeout=_params.get('_request_timeout'),
            collection_formats=_collection_formats,
            _request_auth=_params.get('_request_auth'))
